// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addPost = `-- name: AddPost :one
INSERT INTO posts (id, title, url, description, published_at, feed_id, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, title, url, description, published_at, feed_id, created_at, updated_at
`

type AddPostParams struct {
	ID          uuid.UUID
	Title       string
	Url         string
	Description string
	PublishedAt time.Time
	FeedID      uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) AddPost(ctx context.Context, arg AddPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, addPost,
		arg.ID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const postsForUser = `-- name: PostsForUser :many
SELECT posts.id, title, posts.url, description, published_at, feed_id, posts.created_at, posts.updated_at, feeds.id, name, feeds.url, user_id, feeds.created_at, feeds.updated_at, last_fetched_at FROM posts JOIN feeds ON posts.feed_id = feeds.id WHERE feeds.user_id = $1 ORDER BY published_at DESC limit $2
`

type PostsForUserParams struct {
	UserID uuid.UUID
	Limit  int32
}

type PostsForUserRow struct {
	ID            uuid.UUID
	Title         string
	Url           string
	Description   string
	PublishedAt   time.Time
	FeedID        uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	ID_2          uuid.UUID
	Name          string
	Url_2         string
	UserID        uuid.UUID
	CreatedAt_2   time.Time
	UpdatedAt_2   time.Time
	LastFetchedAt sql.NullTime
}

func (q *Queries) PostsForUser(ctx context.Context, arg PostsForUserParams) ([]PostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, postsForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostsForUserRow
	for rows.Next() {
		var i PostsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Name,
			&i.Url_2,
			&i.UserID,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
